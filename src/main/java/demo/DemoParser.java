/* Generated By:JavaCC: Do not edit this line. DemoParser.java */
package demo;

import java.util.List;
import java.util.ArrayList;
import java.lang.*;
import java.util.LinkedList;
import java.io.IOException;
import java.util.Stack;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.FileWriter;

/*
Klasa przechowuj¹ca: zmienne,  wartoœci zmiennych, tablice,
wartoœci tablic,atruktury funkcji,
*/

public class DemoParser implements DemoParserConstants {

public static FileWriter plikWy = null;

public static boolean ismain=true;

public static LinkedList<String> variables
       =new LinkedList<String>();

public static LinkedList<Double> values
       =new LinkedList<Double>();

public static LinkedList<Function> functions
       =new LinkedList<Function>();

public static LinkedList<String> tables=new LinkedList<String>();

public static LinkedList<Double[]> tables_values=
              new LinkedList<Double[]>();

public static LinkedList<Integer> tables_size
        =new LinkedList<Integer>();

/*
Funkcja tworz¹ca z listy Stringów i konkatenacjê
*/

public static String LinkedtoString(LinkedList<String> list){

    String result="";
    for(int i=0;i<list.size();i++){
        result=result+list.get(i);
    }
    return result;
}

/*
funkcja sprawdzaj¹ca czy istnieje ju¿
tablica lub zmienna o podanej nazwie
*/

public static boolean isDuplicatedVariable(String item){
      return (variables.contains(item)|| tables.contains(item));
}

/*
Funkcja zwracaj¹ca referencjê do funkcji o podanej nazwie
*/

public static Function searchfun(String item){

         Function ret=null;

         for(int i=0;i<functions.size();i++){
             if(functions.get(i).name.equals(item)){
             return functions.get(i);
             }
         }

        return ret;
}

/*
Funkcja zwracaj¹ca indeks na liœcie wszystkich
funkcji dla funkcji o podanej nazwie
*/

public static int searchfun2(String item){

             int x=-1;

         for(int i=0;i<functions.size();i++){
             if(functions.get(i).name.equals(item)){
             x= i;
             }
         }

         return x;
}


/*
Funkcja aktualizuj¹ca wartoœæ zmiennej
*/

public static void actualize(String _variable,
               double val, String funname){
       int i;
       Function myfun=new Function();

       if(variables.contains(_variable)){
           i=variables.indexOf(_variable);
           values.set(i,val);
       }else{
          myfun=searchfun(funname);
          i=myfun.localvariab.indexOf(_variable);
          myfun.valuelocalvariab.set(i,val);
       }
}

/*funkcja drukuj¹ca wartoœci zmiennych i tablic na konsole*/
  final public void print() throws ParseException, NumberFormatException, IOException, My_NotApplicableException, My_DuplicateVariableException, My_NotDeclaredException {
Token t1;
Token t2=new Token();
double d=0;
int i=0;
int ind;
int j;
    jj_consume_token(PRINT);
    jj_consume_token(OPEN_PAR);
    t1 = jj_consume_token(VARIABLE);
              plikWy.write("System.out.println("+t1.image);
    label_1:
    while (true) {
      if (jj_2_1(7)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(OPEN_SQUARE);
      t2 = jj_consume_token(NUMBER);
      jj_consume_token(CLOSE_SQUARE);
 i++;
 plikWy.write("["+t2.image+"]");
    }
    plikWy.write(");\u005cr\u005cn");
    jj_consume_token(CLOSE_PAR);
    jj_consume_token(SEMICOLON);
 if(i==0){
ind=variables.indexOf(t1.image);
d=values.get(ind);
}
if(i>0){
ind=tables.indexOf(t1.image);
j=Integer.valueOf(t2.image);
d=tables_values.get(ind)[j];
}
System.out.println(d);
  }

  final public double eval_tab_el() throws ParseException, NumberFormatException, IOException, My_NotApplicableException, My_DuplicateVariableException, My_NotDeclaredException {
Token t1,t2;
int ind,j;
double d;
    t1 = jj_consume_token(VARIABLE);
    jj_consume_token(OPEN_SQUARE);
    t2 = jj_consume_token(NUMBER);
    jj_consume_token(CLOSE_SQUARE);
 plikWy.write(t1.image+"["+t2.image+"]");
 ind=tables.indexOf(t1.image);
j=Integer.valueOf(t2.image);
d=tables_values.get(ind)[j];
{if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/*funkcja parsuj¹ca wyra¿enie logiczne
i zwracaj¹ca jego wartoœæ*/
  final public boolean boolexp() throws ParseException, NumberFormatException, IOException, My_NotApplicableException, My_DuplicateVariableException, My_NotDeclaredException {
double left;
double right;
double result;
Token token;
    jj_consume_token(BOOL);
    left = Expression();
    if (jj_2_2(7)) {
      token = jj_consume_token(LESS_THAN);
    plikWy.write("<");
    } else if (jj_2_3(7)) {
      token = jj_consume_token(GREATER_THAN);
                          plikWy.write(">");
    } else if (jj_2_4(7)) {
      token = jj_consume_token(LOGIC_EQUALITY);
                            plikWy.write("==");
    } else if (jj_2_5(7)) {
      token = jj_consume_token(LOGIC_INEQUALITY);
                              plikWy.write("!=");
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    right = Expression();
    result=left-right;
   if(result<0 && token.image=="<"){
   //System.out.println("true");
   {if (true) return true;}}

   if(result>0 && token.image==">"){
   //System.out.println("true");
   {if (true) return true;}}

   if(result==0 && token.image=="=="){
   //System.out.println("true");
   {if (true) return true;}}
   if(result!=0 && token.image=="!="){
  // System.out.println("true");
   {if (true) return true;}}
    //System.out.println("false");
  {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

/*G³ówna pêtla funkcji parsuj¹ca kolejne linie*/
  final public void Start() throws ParseException, NumberFormatException, IOException, My_IndexOutOfBoundsException, My_DuplicateVariableException, My_NotApplicableException, My_NotDeclaredException {
//LinkedList<String> variables=new LinkedList<String>();
//LinkedList<Double> values=new LinkedList<Double>();
double d=0.0;
double x=0.0;
 try {

            plikWy = new FileWriter("C:\u005c\u005cobiektowe\u005c\u005cMyProgram.java");
            String tekst = "public class MyProgram{\u005cr\u005cn";
            plikWy.write(tekst);
        }catch(IOException e) {

                        e.printStackTrace();
                }finally {
            if (plikWy != null) {
               // plikWy.close();
            }
        }
    label_2:
    while (true) {
      if (jj_2_6(7)) {
        ;
      } else {
        break label_2;
      }
      statement();
    }
 plikWy.write("\u005cr\u005cn}\u005cr\u005cn};");
plikWy.close();
    jj_consume_token(0);
  }

/*funkcja rozdzielaj¹ca kolejne typy instrukcji*/
  final public void statement() throws ParseException, NumberFormatException, IOException, My_IndexOutOfBoundsException, My_DuplicateVariableException, My_NotApplicableException, My_NotDeclaredException {
     Token t;
     double w;
    if (jj_2_7(7)) {
      mainstart();
    } else if (jj_2_8(7)) {
      spra();
    } else if (jj_2_9(7)) {
      assig();
    } else if (jj_2_10(7)) {
      assig2();
    } else if (jj_2_11(7)) {
      evalfunction();
    } else if (jj_2_12(7)) {
      Expression();
    } else if (jj_2_13(7)) {
      setvalue();
    } else if (jj_2_14(7)) {
      Testmy();
    } else if (jj_2_15(7)) {
      function();
    } else if (jj_2_16(7)) {
      sprawdz();
    } else if (jj_2_17(7)) {
      loop();
    } else if (jj_2_18(7)) {
      boolexp();
    } else if (jj_2_19(7)) {
      conditional();
    } else if (jj_2_20(7)) {
      tab_assig();
    } else if (jj_2_21(7)) {
      el_tab_assig();
    } else if (jj_2_22(7)) {
      print();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*funkcja obs³uguj¹ca pêtle*/
  final public void loop() throws ParseException, NumberFormatException, IOException, My_DuplicateVariableException, My_NotApplicableException, My_NotDeclaredException {
int loop_begin;

int loop_end;

Token token0;

Token token;

Token token2;

LinkedList<String> list;

LinkedList<String> leftside=new LinkedList<String>();

LinkedList<LinkedList<String>> statm=
   new LinkedList<LinkedList<String>>();
int i;
int j;
String iterowanie;
    jj_consume_token(FOR);
    jj_consume_token(OPEN_PAR);
    token0 = jj_consume_token(VARIABLE);
    jj_consume_token(ASSIGNMENT);
    token2 = jj_consume_token(NUMBER);
 plikWy.write("\u005cr\u005cn for("+token0.image+
"="+token2.image+";"+token0.image);
  iterowanie=token0.image;
  variables.add(iterowanie);
  values.add(0.0);
loop_begin=Integer.valueOf(token2.image);
    jj_consume_token(SEMICOLON);
    jj_consume_token(VARIABLE);
    jj_consume_token(LESS_THAN);
    token = jj_consume_token(NUMBER);
  plikWy.write("<"+token.image+";"+token0.image+"++){\u005cr\u005cn");
  loop_end=Integer.valueOf(token.image);
    jj_consume_token(SEMICOLON);
    jj_consume_token(VARIABLE);
    jj_consume_token(DOUBLE_PLUS);
    jj_consume_token(CLOSE_PAR);
    jj_consume_token(OPEN_BRACE);
    label_3:
    while (true) {
      if (jj_2_23(7)) {
        ;
      } else {
        break label_3;
      }
      token = jj_consume_token(VARIABLE);
      jj_consume_token(ASSIGNMENT);
    plikWy.write(token.image+"=");
      list = MathExpression();
      jj_consume_token(SEMICOLON);
               plikWy.write(";\u005cr\u005cn");
      leftside.add(token.image);
           statm.add(list);
    }
    jj_consume_token(CLOSE_BRACE);
            plikWy.write("\u005cr\u005cn}\u005cr\u005cn");
     //System.out.println(variables);
     //System.out.println(values);

   for(i=loop_begin;i<loop_end;i++){

      actualize(iterowanie,Double.valueOf(i), "");

      for(j=0;j<statm.size();j++){
      actualize(leftside.get(j),Eval.evalRPN(statm.get(j),"",
              new LinkedList<Double>()),"");
      }
    }
  }

/*funkcja obs³uguj¹ca wyra¿enia warunkowe*/
  final public void conditional() throws ParseException, NumberFormatException, IOException, My_DuplicateVariableException, My_NotApplicableException, My_NotDeclaredException {
boolean cond;

LinkedList<String> list;

Token token;

LinkedList<String> trueleftside=new LinkedList<String>();

LinkedList<LinkedList<String>> truestatm=
        new LinkedList<LinkedList<String>>();

LinkedList<String> falseleftside=new LinkedList<String>();

LinkedList<LinkedList<String>> falsestatm=
        new LinkedList<LinkedList<String>>();
        int j;
    jj_consume_token(IF);
    jj_consume_token(OPEN_PAR);
                 plikWy.write("\u005cr\u005cnif(");
    cond = boolexp();
    jj_consume_token(CLOSE_PAR);
                             plikWy.write("){\u005cr\u005cn");
    jj_consume_token(OPEN_BRACE);
    label_4:
    while (true) {
      if (jj_2_24(7)) {
        ;
      } else {
        break label_4;
      }
      token = jj_consume_token(VARIABLE);
      jj_consume_token(ASSIGNMENT);
             plikWy.write(token.image+"=");
      list = MathExpression();
      jj_consume_token(SEMICOLON);
                                   plikWy.write(";\u005cr\u005cn");
      trueleftside.add(token.image);
           truestatm.add(list);
    }
    jj_consume_token(CLOSE_BRACE);
    jj_consume_token(ELSE);
            plikWy.write("}else{\u005cr\u005cn");
    jj_consume_token(OPEN_BRACE);
    label_5:
    while (true) {
      if (jj_2_25(7)) {
        ;
      } else {
        break label_5;
      }
      token = jj_consume_token(VARIABLE);
      jj_consume_token(ASSIGNMENT);
 plikWy.write(token.image+"=");
      list = MathExpression();
      jj_consume_token(SEMICOLON);
 plikWy.write(";\u005cr\u005cn");
      falseleftside.add(token.image);
           falsestatm.add(list);
    }
    jj_consume_token(CLOSE_BRACE);
               plikWy.write("\u005cr\u005cn}\u005cr\u005cn");
if(cond){
for(j=0;j<truestatm.size();j++){
      actualize(trueleftside.get(j),
         Eval.evalRPN(truestatm.get(j),"",
         new LinkedList<Double>()),"");
      }
}else{
for(j=0;j<falsestatm.size();j++){
      actualize(falseleftside.get(j),
      Eval.evalRPN(falsestatm.get(j),"",
       new LinkedList<Double>()),"");
  }
}
  }

 /*Funkcja s³u¿¹ca do testowania */
  final public void sprawdz() throws ParseException, NumberFormatException, IOException, My_DuplicateVariableException, My_NotApplicableException, My_NotDeclaredException {
Function myfun;
    jj_consume_token(SPR);
//System.out.println("sprawdz");
myfun=functions.get(0);
System.out.println(myfun.name);

System.out.println("input zmianne");

for(int i=0;i<myfun.inputvariab.size();i++){
System.out.println(myfun.inputvariab.get(i));
}


System.out.println("local zmianne");

for(int i=0;i<myfun.localvariab.size();i++){
System.out.println(myfun.localvariab.get(i));
}

System.out.println("local");

for(int i=0;i<myfun.valuelocalvariab.size();i++){
System.out.println(myfun.valuelocalvariab.get(i));
}

System.out.println("local zmianne");

for(int i=0;i<myfun.statm.size();i++){
System.out.println(myfun.statm.get(i));
}
  }

/*funkcja inicjuj¹ca g³ówn¹ czêœæ programu */
  final public void mainstart() throws ParseException, NumberFormatException, IOException, My_NotApplicableException, My_DuplicateVariableException, My_NotDeclaredException {
    jj_consume_token(MAIN);
 plikWy.write("public static void main(String[] args){\u005cr\u005cn");
  }

/*Funkcja zwracaj¹ca wartoœæ funkcji na argumentach*/
  final public double evalfunction() throws ParseException, NumberFormatException, IOException, My_NotApplicableException, My_DuplicateVariableException, My_NotDeclaredException {
String funname;
LinkedList<Double> inputvalues=new LinkedList<Double>();
Function myfun=new Function();
double d;
int countp=0;
    token = jj_consume_token(VARIABLE);
      funname=token.image;
     plikWy.write("MyProgram."+funname+"(");
    jj_consume_token(OPEN_PAR);
    label_6:
    while (true) {
      if (jj_2_26(7)) {
        ;
      } else {
        break label_6;
      }
     if(countp>0){
    plikWy.write(",");
    }
       countp++;
      d = Expression();
     inputvalues.add(d);
    //inputvalues.add(Double.valueOf(token.image));

      jj_consume_token(COMMA);
    }
    jj_consume_token(CLOSE_PAR);
                 plikWy.write(")");
     myfun=DemoParser.searchfun(funname);
    if(inputvalues.size()!=myfun.inputvariab.size()  ){
          {if (true) throw new My_NotApplicableException();}
    }
    for(int i=0;i<myfun.statm.size();i++){
        actualize(myfun.leftside.get(i),
        Eval.evalRPN(myfun.statm.get(i),funname,inputvalues),funname);
    }
     //System.out.println(Eval.evalRPN(myfun.returnvalue,funname, inputvalues));
     {if (true) return Eval.evalRPN(myfun.returnvalue,funname,inputvalues);}
    throw new Error("Missing return statement in function");
  }

/*funkcja parsuj¹ca funkcje i zapisuje jej strukture*/
  final public void function() throws ParseException, NumberFormatException, IOException, My_DuplicateVariableException, My_NotApplicableException, My_NotDeclaredException {
  Function myfun=new Function();
  Token token;
  LinkedList<String> list;
  int i=0;
    jj_consume_token(FUN);
    token = jj_consume_token(VARIABLE);
  plikWy.write("public static double "+token.image+"(");
        myfun.name=token.image;
        ismain=false;
    jj_consume_token(OPEN_PAR);
    label_7:
    while (true) {
      if (jj_2_27(7)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(DOUBLE);
      token = jj_consume_token(VARIABLE);
     if(i>0){plikWy.write(",");}
    i++;
    plikWy.write(" double "+token.image);
     myfun.inputvariab.add(token.image);
      jj_consume_token(COMMA);
    }
    jj_consume_token(CLOSE_PAR);
                plikWy.write("){\u005cr\u005cn");
    jj_consume_token(OPEN_BRACE);
    label_8:
    while (true) {
      if (jj_2_28(7)) {
        ;
      } else {
        break label_8;
      }
      funassig2(myfun);
    }
    label_9:
    while (true) {
      if (jj_2_29(7)) {
        ;
      } else {
        break label_9;
      }
      token = jj_consume_token(VARIABLE);
      jj_consume_token(ASSIGNMENT);
     plikWy.write(token.image+"=");
      list = MathExpression();
      jj_consume_token(SEMICOLON);
                                       plikWy.write(";\u005cr\u005cn");
       myfun.leftside.add(token.image);
       myfun.statm.add(list);
    }
    jj_consume_token(RETURN);
              plikWy.write("return ");
    list = MathExpression();
    jj_consume_token(SEMICOLON);
                                      plikWy.write(";\u005cr\u005cn");
     myfun.returnvalue=list;
    jj_consume_token(CLOSE_BRACE);
                   plikWy.write("}\u005cr\u005cn");
     functions.add(myfun);
    ismain=true;
  }

/*funkcja deklaruj¹ca tablice i inicjalizuj¹ca j¹*/
  final public void tab_assig() throws ParseException, NumberFormatException, IOException, My_DuplicateVariableException, My_NotApplicableException, My_NotDeclaredException {
Token t;
Token t2;
int dim;
    jj_consume_token(DOUBLE);
    jj_consume_token(OPEN_SQUARE);
    jj_consume_token(CLOSE_SQUARE);
    t = jj_consume_token(VARIABLE);
    jj_consume_token(ASSIGNMENT);
    jj_consume_token(NEW);
    jj_consume_token(DOUBLE);
    jj_consume_token(OPEN_SQUARE);
    t2 = jj_consume_token(NUMBER);
    jj_consume_token(CLOSE_SQUARE);
    jj_consume_token(SEMICOLON);
 plikWy.write("double[] "+t.image+"=new double["+t2.image+"];\u005cr\u005cn");
 if(isDuplicatedVariable(t.image)){
     {if (true) throw new My_DuplicateVariableException();}
  }
tables.add(t.image);
dim=Integer.valueOf(t2.image);
tables_size.add(dim);
tables_values.add(new Double[dim]);
  }

/*inicjalizacja elementu tablicy*/
  final public void el_tab_assig() throws ParseException, NumberFormatException, IOException, My_IndexOutOfBoundsException, My_NotApplicableException, My_NotDeclaredException {
Token t,t2,t3;
int ind;
double val;
int i;
int size;
    jj_consume_token(AS);
    t = jj_consume_token(VARIABLE);
    jj_consume_token(OPEN_SQUARE);
    t2 = jj_consume_token(NUMBER);
    jj_consume_token(CLOSE_SQUARE);
    jj_consume_token(ASSIGNMENT);
    t3 = jj_consume_token(NUMBER);
    jj_consume_token(SEMICOLON);
  plikWy.write(t.image+"["+t2.image+"]="+t3.image+";\u005cr\u005cn");
  ind=Integer.valueOf(t2.image);
  val=Double.valueOf(t3.image);
  i=tables.indexOf(t.image);
  size=tables_size.get(i);
  if(ind>=size || ind <0){
  {if (true) throw new My_IndexOutOfBoundsException();}
  }
  tables_values.get(i)[ind]=val;
  }

/*funkcja s³uz¹ca do testowania tablic*/
  final public void spra() throws ParseException, NumberFormatException, IOException, My_NotDeclaredException {
int i;
    jj_consume_token(SPRA);
 for(i=0;i<8;i++){

System.out.print(tables_values.get(0)[i]);
}System.out.println();
  }

/*deklaracja wraz z inicjalizacja zmiennej*/
  final public void assig() throws ParseException, NumberFormatException, IOException, My_DuplicateVariableException, My_NotApplicableException, My_NotDeclaredException {
     Token t;
     Double d;
    jj_consume_token(DOUBLE);
    t = jj_consume_token(VARIABLE);
    jj_consume_token(ASSIGNMENT);
               plikWy.write("double "+ t.image+"=");
    d = Expression();
    jj_consume_token(SEMICOLON);
                            plikWy.write(";\u005cr\u005cn");
  if(isDuplicatedVariable(t.image)){
     {if (true) throw new My_DuplicateVariableException();}
  }
  variables.add(t.image);
  values.add(d);
  }

/*Deklaracja zmiennej*/
  final public void assig2() throws ParseException, NumberFormatException, IOException, My_DuplicateVariableException, My_NotApplicableException, My_NotDeclaredException {
 Token t;
 Double d;
    jj_consume_token(DOUBLE);
    t = jj_consume_token(VARIABLE);
    jj_consume_token(SEMICOLON);
   plikWy.write("double "+ t.image+";\u005cr\u005cn");
  if(isDuplicatedVariable(t.image)){
     {if (true) throw new My_DuplicateVariableException();}
  }
  variables.add(t.image);
  values.add(0.0);
  }

/*deklaracja zmiennej lokalnej wewn¹trz funkcji*/
  final public void funassig2(Function item) throws ParseException, NumberFormatException, IOException, My_DuplicateVariableException, My_NotApplicableException, My_NotDeclaredException {
 Token t;
 Double d;
    jj_consume_token(DOUBLE);
    t = jj_consume_token(VARIABLE);
    jj_consume_token(SEMICOLON);
   plikWy.write("double "+t.image+";\u005cr\u005cn");
  item.localvariab.add(t.image);
  item.valuelocalvariab.add(0.0);
  }

/*Przypisanie wartoœci do zmiennej*/
  final public void setvalue() throws ParseException, NumberFormatException, IOException, My_DuplicateVariableException, My_NotApplicableException, My_NotDeclaredException {
     Token t;
     Double d;
     int i;
    jj_consume_token(AS);
    t = jj_consume_token(VARIABLE);
                     if(!variables.contains(t.image)){
  {if (true) throw new My_NotDeclaredException();}
  }
    jj_consume_token(ASSIGNMENT);
                 plikWy.write(t.image+"=");
    d = Expression();
    jj_consume_token(SEMICOLON);
   plikWy.write(";\u005cr\u005cn");
  i=variables.indexOf(t.image);
  values.set(i,d);
  }

/*odczyt wartoœci ze zmiennej, wartoœci
 funkcji na elementach i elementu tablicy*/
  final public double Primary() throws ParseException, NumberFormatException, IOException, My_DuplicateVariableException, My_NotApplicableException, My_NotDeclaredException {
        Token token;
        double d;
        int i;
    if (jj_2_30(7)) {
      token = jj_consume_token(NUMBER);
                         plikWy.write(token.image);
         {if (true) return Double.parseDouble(token.image);}
    } else if (jj_2_31(7)) {
      d = eval_tab_el();
         {if (true) return d;}
    } else if (jj_2_32(7)) {
      jj_consume_token(OPEN_PAR);
                    plikWy.write("(");
      d = Expression();
      jj_consume_token(CLOSE_PAR);
                      plikWy.write(")");
         {if (true) return d;}
    } else if (jj_2_33(7)) {
      d = evalfunction();
         {if (true) return d;}
    } else if (jj_2_34(7)) {
      token = jj_consume_token(VARIABLE);
                            plikWy.write(token.image);
         i=variables.indexOf(token.image);

        {if (true) return values.get(i);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*Funkcja obs³uguj¹ca wyra¿enia algebraiczne*/
  final public double Expression() throws ParseException, NumberFormatException, IOException, My_DuplicateVariableException, My_NotApplicableException, My_NotDeclaredException {
        double i;
        double value;
    value = Term();
    label_10:
    while (true) {
      if (jj_2_35(7)) {
        ;
      } else {
        break label_10;
      }
      if (jj_2_36(7)) {
        jj_consume_token(PLUS);
               plikWy.write("+");
        i = Term();
         value += i;
      } else if (jj_2_37(7)) {
        jj_consume_token(MINUS);
                plikWy.write("-");
        i = Term();
         value -= i;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         //System.out.println(value);
        {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public void Testmy() throws ParseException, NumberFormatException, IOException, My_NotDeclaredException {
    jj_consume_token(HEJ);
 Myclass.hej();
  }

/*Funkcja obs³uguj¹ca wyra¿enia algebraiczne*/
  final public LinkedList<String> MathExpression() throws ParseException, NumberFormatException, IOException, My_DuplicateVariableException, My_NotApplicableException, My_NotDeclaredException {
Token token;

LinkedList<String> wyr=new LinkedList<String>();

LinkedList<String> tranwyr=new LinkedList<String>();

InToPost into=new InToPost();
    label_11:
    while (true) {
      if (jj_2_38(7)) {
        ;
      } else {
        break label_11;
      }
      if (jj_2_39(7)) {
        token = jj_consume_token(VARIABLE);
 wyr.add(token.image);
      } else if (jj_2_40(7)) {
        token = jj_consume_token(NUMBER);
 wyr.add(token.image);
      } else if (jj_2_41(7)) {
        token = jj_consume_token(PLUS);
 wyr.add(token.image);
      } else if (jj_2_42(7)) {
        token = jj_consume_token(MINUS);
 wyr.add(token.image);
      } else if (jj_2_43(7)) {
        token = jj_consume_token(TIMES);
 wyr.add(token.image);
      } else if (jj_2_44(7)) {
        token = jj_consume_token(DIVIDE);
 wyr.add(token.image);
      } else if (jj_2_45(7)) {
        token = jj_consume_token(OPEN_PAR);
 wyr.add(token.image);
      } else if (jj_2_46(7)) {
        token = jj_consume_token(CLOSE_PAR);
 wyr.add(token.image);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  plikWy.write(LinkedtoString(wyr));
into.init(wyr);
  tranwyr=into.doTrans();
 //System.out.println(wyr);
 //System.out.println(tranwyr);
 {if (true) return tranwyr;}
    throw new Error("Missing return statement in function");
  }

  final public double Term() throws ParseException, NumberFormatException, IOException, My_DuplicateVariableException, My_NotApplicableException, My_NotDeclaredException {
        double i;
        double value;
    value = Primary();
    label_12:
    while (true) {
      if (jj_2_47(7)) {
        ;
      } else {
        break label_12;
      }
      if (jj_2_48(7)) {
        jj_consume_token(TIMES);
                plikWy.write("*");
        i = Primary();
         value *= i;
      } else if (jj_2_49(7)) {
        jj_consume_token(DIVIDE);
                 plikWy.write("\u005c\u005c");
        i = Primary();
         value /= i;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_3_22() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(DOUBLE)) return true;
    if (jj_scan_token(OPEN_SQUARE)) return true;
    if (jj_scan_token(CLOSE_SQUARE)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(DOUBLE)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(MAIN)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(OPEN_SQUARE)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(CLOSE_SQUARE)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(DOUBLE)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(DOUBLE)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(FUN)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_PAR)) return true;
    if (jj_scan_token(OPEN_BRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(OPEN_SQUARE)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(CLOSE_SQUARE)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_PAR)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(SPRA)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(SPR)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(AS)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(LESS_THAN)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(HEJ)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(AS)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(OPEN_SQUARE)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(CLOSE_SQUARE)) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_19()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(DOUBLE)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) return true;
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(LOGIC_INEQUALITY)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(LOGIC_EQUALITY)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(GREATER_THAN)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(BOOL)) return true;
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    }
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(TIMES)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public DemoParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[49];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public DemoParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DemoParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DemoParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DemoParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DemoParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DemoParser(DemoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DemoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 49; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

/*
klasa przechowuj¹ca strukturê funkcji
*/

class Function{

    public String name;
    LinkedList<String> inputvariab=new LinkedList<String>();

    LinkedList<Double> valuesinputvariab;

    LinkedList<String> localvariab=new LinkedList<String>();

    LinkedList<Double> valuelocalvariab
           =new LinkedList<Double>();

    LinkedList<LinkedList<String>> statm
           =new LinkedList<LinkedList<String>>();

    LinkedList<String> leftside=new LinkedList<String>();

    LinkedList<String> returnvalue= new LinkedList<String>();

}


/*
Klasa pomocnicza z zaimplementowanymi funkcjami do zmiany
wyra¿enia algebraicznego z postaci infiksowej na postfiksow¹
*/

class InToPost {

   private  Stack<String> theStack=new Stack<String>();

   private  LinkedList<String> input;

   private  LinkedList<String> output
             = new LinkedList<String>();

   public  void init(LinkedList<String> in){
           input=in;
   }


   public  LinkedList<String> doTrans() {

      for (int j = 0; j < input.size(); j++) {
         String ch = input.get(j);
         switch (ch) {
            case "+":
            case "-":
               gotOper(ch, 1);
               break;
            case "*":
            case "/":
               gotOper(ch, 2);
               break;
            case "(":
               theStack.push(ch);
               break;
            case ")":
               gotParen(ch);
               break;
            default:
               output.add(ch);
               break;
         }
      }
      while (!theStack.isEmpty()) {
         output.add(theStack.pop());
      }
      //System.out.println(output);
      return output;
   }
   public  void gotOper(String opThis, int prec1) {
      while (!theStack.isEmpty()) {
         String opTop = theStack.pop();
         if (opTop == "(") {
            theStack.push(opTop);
            break;
         } else {
            int prec2;
            if (opTop == "+" || opTop == "-")
            prec2 = 1;
            else
            prec2 = 2;
            if (prec2 < prec1) {
               theStack.push(opTop);
               break;
            }
            else output.add(opTop);
         }
      }
      theStack.push(opThis);
   }
   public  void gotParen(String ch) {
      while (!theStack.isEmpty()) {
         String chx = theStack.pop();
         if (chx == "(")
         break;
         else output.add(chx);
      }
   }


}


/*

Pomocnicz klasa z funkcjami s³u¿¹cymi do liczenia
wartoœci wyra¿eñ w postaci postfiksowej
*/

class Eval{

public static double valvar(String _variable, String _funname,
        LinkedList<Double> input){

       double ret=0.0;

       Function myfun;

       for(int i=0;i<DemoParser.variables.size();i++){
           if(_variable.equals(DemoParser.variables.get(i))){
           return DemoParser.values.get(i);
           }
       }
       myfun=DemoParser.searchfun(_funname);
       for(int i=0;i<myfun.inputvariab.size();i++){
           if(_variable.equals(myfun.inputvariab.get(i))){
           return input.get(i);
           }
       }

       for(int i=0;i<myfun.localvariab.size();i++){
           if(_variable.equals(myfun.localvariab.get(i))){
           return myfun.valuelocalvariab.get(i);
           }
       }
       return ret;

}

/*
Funkcja sprawdzaj¹ca czy podany ci¹g znaków jest double
*/

public static boolean isdouble(String item){

              String pattern = "^(-?)(0|([1-9][0-9]*))(\u005c\u005c.[0-9]+)?$";

              Pattern r = Pattern.compile(pattern);

              // Now create matcher object.
              Matcher m = r.matcher(item);

             return m.matches();
        }


        public static double evalRPN(LinkedList<String>  item,
                String _funname, LinkedList<Double> input){
                        Stack<Double> myStack=new Stack<Double>();
                        String next;
                        String operators="*/-+";
                        double pom;
                        for(int i=0;i<item.size();i++){
                                next=item.get(i);

                                if (!operators.contains(next)) {
                                //push to stack if it is a number
                                        if(isdouble(next)){
                                        myStack.push(Double.valueOf(next));
                                        }else{
                                                myStack.push(valvar(next,_funname,input));
                                        }
                                } else {
                                        double a = myStack.pop();
                                        double b = myStack.pop();
                                        switch (next) {
                                        case "+":
                                                myStack.push(a + b);
                                                break;
                                        case "-":
                                                myStack.push(b - a);
                                                break;
                                        case "*":
                                                myStack.push(a * b);
                                                break;
                                        case "/":
                                                myStack.push(b / a);
                                                break;
                                        }


                        }


        }
                        return myStack.pop();
}

}

/*Wyj¹tki*/

class My_IndexOutOfBoundsException extends Throwable {

}

class My_DuplicateVariableException extends Throwable {

}

class My_NotApplicableException extends Throwable {

}

class My_NotDeclaredException extends Throwable {

}
